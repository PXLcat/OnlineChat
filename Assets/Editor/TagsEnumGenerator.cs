using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Text;
using System.IO;
using UnityEditorInternal;

public class TagsEnumGenerator
{
    private const string PATH = "Assets/_AutoGenerated/Tags.gen.cs";
    //private static List<string> currentTags

    //Pour l'automatisation
    //static TagsEnumGenerator()
    //{
    //    EditorApplication.update += UpdateTags;
    //}

    //public static bool IsChanged (List<string> before, List<string> after)
    //{

    //}

    [MenuItem("Tools/Update Tags")]
    public static void UpdateTags()
    {
        Debug.Log("Update Tags");

        StringBuilder sb = new StringBuilder();
        BuildString(sb);
        WriteFile(PATH, sb);
    }

    private static void BuildString(StringBuilder sb)
    {
        sb.Append("public static class Tags\n{\n");
        GetTags(sb);
        sb.Append("}");
    }

    private static void GetTags(StringBuilder sb)
    {
        foreach (string tag in InternalEditorUtility.tags)
        {
            sb.Append("public const string ")
                .Append(tag)
                .Append(" = ")
                .Append("\"")
                .Append(tag)
                .AppendLine("\";");
        }
    }

    private static void WriteFile(string path, StringBuilder text)
    {
        FileInfo fi = new FileInfo(path);
        if (!fi.Directory.Exists)
        {
            Directory.CreateDirectory(fi.DirectoryName);
        }

        //Path.
        string directory = Path.GetDirectoryName(path);

        //On ouvre un flux en écriture
        using (FileStream fs = File.Open(path, FileMode.Create, FileAccess.Write))
        using (StreamWriter sw = new StreamWriter(fs))
        {
            sw.Write(text.ToString());
            sw.Flush(); //voir ce qu'il y a dans le Dispose()
        }

    }

}
